 导入PyTorch和transformers库
import torch
from transformers import BertTokenizer, BertForSequenceClassification
from transformers import AdamW, get_linear_schedule_with_warmup

# 设置设备
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# 加载BERT tokenizer
tokenizer = BertTokenizer.from_pretrained('bert-large-uncased', do_lower_case=True)

# 加载BERT模型
model = BertForSequenceClassification.from_pretrained('bert-large-uncased', num_labels=2)
model.to(device)

# 加载经典的IMDB数据集并对其进行预处理
from torch.utils.data import Dataset, DataLoader
import pandas as pd

class IMDBDataset(Dataset):
    def __init__(self, csv_path):
        self.data = pd.read_csv(csv_path)
        self.label_map = {'negative': 0, 'positive': 1} # 将标签映射到整数
        self.tokenizer = tokenizer
    
    def __len__(self):
        return len(self.data)
    
    def __getitem__(self, idx):
        text = str(self.data.iloc[idx]['review'])
        label = self.label_map[self.data.iloc[idx]['sentiment']]
        encoding = self.tokenizer.encode_plus(
            text, 
            add_special_tokens=True,
            max_length=512,
            pad_to_max_length=True,
            return_attention_mask=True,
            return_token_type_ids=True,
            return_tensors='pt'
        )
        input_ids = encoding['input_ids'].flatten()
        attention_mask = encoding['attention_mask'].flatten()
        token_type_ids = encoding['token_type_ids'].flatten()
        return (input_ids, attention_mask, token_type_ids, label)
      
# 设置超参数
BATCH_SIZE = 8
NUM_EPOCHS = 3
LEARNING_RATE = 2e-5

# 加载训练和验证数据集
train_dataset = IMDBDataset('imdb_csv/train.csv')
train_dataloader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)

val_dataset = IMDBDataset('imdb_csv/test.csv')
val_dataloader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False)

# 设置优化器和学习率调度器
optimizer = AdamW(model.parameters(), lr=LEARNING_RATE, eps=1e-8)
total_steps = len(train_dataloader) * NUM_EPOCHS
scheduler = get_linear_schedule_with_warmup(
    optimizer,
    num_warmup_steps=0,
    num_training_steps=total_steps
)

# 训练和验证模型
for epoch in range(NUM_EPOCHS):
    model.train()
    train_loss = 0
    train_corrects = 0
    for i, batch in enumerate(train_dataloader):
        input_ids = batch[0].to(device)
        attention_mask = batch[1].to(device)
        token_type_ids = batch[2].to(device)
        labels = batch[3].to(device)
        
        # 正向传播
        outputs = model(
            input_ids=input_ids,
            attention_mask=attention_mask,
            token_type_ids=token_type_ids,
            labels=labels
        )
        
        loss = outputs[0]
        train_loss += loss.item()
        
        # 反向传播与参数更新
        loss.backward()
        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)
        optimizer.step()
        scheduler.step()
        optimizer.zero_grad()
        
        # 计算训练集的准确率
        _, preds = torch.max(outputs[1], 1)
        train_corrects += torch.sum(preds == labels.data)
    
    train_loss = train_loss / len(train_dataset)
    train_acc = train_corrects.double() / len(train_dataset)
    
    # 验证模型
    model.eval()
    val_loss = 0
    val_corrects = 0
    for batch in val_dataloader:
        input_ids = batch[0].to(device)
        attention_mask = batch[1].to(device)
        token_type_ids = batch[2].to(device)
        labels = batch[3].to(device)
        
        # 正向传播
        with torch.no_grad():
            outputs = model(
                input_ids=input_ids,
                attention_mask=attention_mask,
                token_type_ids=token_type_ids,
                labels=labels
            )
        
        loss = outputs[0]
        val_loss += loss.item()
        
        # 计算验证集的准确率
        _, preds = torch.max(outputs[1], 1)
        val_corrects += torch.sum(preds == labels.data)
    
    val_loss = val_loss / len(val_dataset)
    val_acc = val_corrects.double() / len(val_dataset)
    
    # 打印训练和验证集的损失和准确率
    print('Epoch: {}/{}'.format(epoch+1, NUM_EPOCHS))
    print('Training Loss: {:.4f} Accuracy: {:.4f}'.format(train_loss, train_acc))
    print('Validation Loss: {:.4f} Accuracy: {:.4f}'.format(val_loss, val_acc))
